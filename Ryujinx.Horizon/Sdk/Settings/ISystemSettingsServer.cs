using Ryujinx.Horizon.Common;
using Ryujinx.Horizon.Sdk.Fssystem;
using Ryujinx.Horizon.Sdk.Ncm;
using Ryujinx.Horizon.Sdk.Settings.System;
using Ryujinx.Horizon.Sdk.Sf;
using Ryujinx.Horizon.Sdk.Time;
using Ryujinx.Horizon.Sdk.Util;
using System;

namespace Ryujinx.Horizon.Sdk.Settings
{
    interface ISystemSettingsServer : IServiceObject
    {
        Result SetLanguageCode(LanguageCode arg0);
        Result SetNetworkSettings(ReadOnlySpan<NetworkSettings> arg0);
        Result GetNetworkSettings(out int arg0, Span<NetworkSettings> arg1);
        Result GetFirmwareVersion(out FirmwareVersion arg0);
        Result GetFirmwareVersion2(out FirmwareVersion arg0);
        Result GetFirmwareVersionDigest(out FirmwareVersionDigest arg0);
        Result GetLockScreenFlag(out bool arg0);
        Result SetLockScreenFlag(bool arg0);
        Result GetBacklightSettings(out BacklightSettings arg0);
        Result SetBacklightSettings(BacklightSettings arg0);
        Result SetBluetoothDevicesSettings(ReadOnlySpan<BluetoothDevicesSettings> arg0);
        Result GetBluetoothDevicesSettings(out int arg0, Span<BluetoothDevicesSettings> arg1);
        Result GetExternalSteadyClockSourceId(out Uuid arg0);
        Result SetExternalSteadyClockSourceId(Uuid arg0);
        Result GetUserSystemClockContext(out SystemClockContext arg0);
        Result SetUserSystemClockContext(SystemClockContext arg0);
        Result GetAccountSettings(out AccountSettings arg0);
        Result SetAccountSettings(AccountSettings arg0);
        Result GetAudioVolume(out AudioVolume arg0, int arg1);
        Result SetAudioVolume(AudioVolume arg0, int arg1);
        Result GetEulaVersions(out int arg0, Span<EulaVersion> arg1);
        Result SetEulaVersions(ReadOnlySpan<EulaVersion> arg0);
        Result GetColorSetId(out int arg0);
        Result SetColorSetId(int arg0);
        Result GetConsoleInformationUploadFlag(out bool arg0);
        Result SetConsoleInformationUploadFlag(bool arg0);
        Result GetAutomaticApplicationDownloadFlag(out bool arg0);
        Result SetAutomaticApplicationDownloadFlag(bool arg0);
        Result GetNotificationSettings(out NotificationSettings arg0);
        Result SetNotificationSettings(NotificationSettings arg0);
        Result GetAccountNotificationSettings(out int arg0, Span<AccountNotificationSettings> arg1);
        Result SetAccountNotificationSettings(ReadOnlySpan<AccountNotificationSettings> arg0);
        Result GetVibrationMasterVolume(out float arg0);
        Result SetVibrationMasterVolume(float arg0);
        Result GetSettingsItemValueSize(out ulong arg0, in SettingsName arg1, in SettingsItemKey arg2);
        Result GetSettingsItemValue(out ulong arg0, Span<byte> arg1, in SettingsName arg2, in SettingsItemKey arg3);
        Result GetTvSettings(out TvSettings arg0);
        Result SetTvSettings(TvSettings arg0);
        Result GetEdid(out Edid arg0);
        Result SetEdid(in Edid arg0);
        Result GetAudioOutputMode(out int arg0, int arg1);
        Result SetAudioOutputMode(int arg0, int arg1);
        Result GetSpeakerAutoMuteFlag(out bool arg0);
        Result SetSpeakerAutoMuteFlag(bool arg0);
        Result GetQuestFlag(out bool arg0);
        Result SetQuestFlag(bool arg0);
        Result GetDataDeletionSettings(out DataDeletionSettings arg0);
        Result SetDataDeletionSettings(DataDeletionSettings arg0);
        Result GetInitialSystemAppletProgramId(out ProgramId arg0);
        Result GetOverlayDispProgramId(out ProgramId arg0);
        Result GetDeviceTimeZoneLocationName(out LocationName arg0);
        Result SetDeviceTimeZoneLocationName(LocationName arg0);
        Result GetWirelessCertificationFileSize(out ulong arg0);
        Result GetWirelessCertificationFile(out ulong arg0, Span<byte> arg1);
        Result SetRegionCode(int arg0);
        Result GetNetworkSystemClockContext(out SystemClockContext arg0);
        Result SetNetworkSystemClockContext(SystemClockContext arg0);
        Result IsUserSystemClockAutomaticCorrectionEnabled(out bool arg0);
        Result SetUserSystemClockAutomaticCorrectionEnabled(bool arg0);
        Result GetDebugModeFlag(out bool arg0);
        Result GetPrimaryAlbumStorage(out int arg0);
        Result SetPrimaryAlbumStorage(int arg0);
        Result GetUsb30EnableFlag(out bool arg0);
        Result SetUsb30EnableFlag(bool arg0);
        Result GetBatteryLot(out BatteryLot arg0);
        Result GetSerialNumber(out SerialNumber arg0);
        Result GetNfcEnableFlag(out bool arg0);
        Result SetNfcEnableFlag(bool arg0);
        Result GetSleepSettings(out SleepSettings arg0);
        Result SetSleepSettings(SleepSettings arg0);
        Result GetWirelessLanEnableFlag(out bool arg0);
        Result SetWirelessLanEnableFlag(bool arg0);
        Result GetInitialLaunchSettings(out InitialLaunchSettings arg0);
        Result SetInitialLaunchSettings(InitialLaunchSettings arg0);
        Result GetDeviceNickName(out DeviceNickName arg0);
        Result SetDeviceNickName(in DeviceNickName arg0);
        Result GetProductModel(out int arg0);
        Result GetLdnChannel(out int arg0);
        Result SetLdnChannel(int arg0);
        Result AcquireTelemetryDirtyFlagEventHandle(out int arg0);
        Result GetTelemetryDirtyFlags(out TelemetryDirtyFlag arg0);
        Result GetPtmBatteryLot(out BatteryLot arg0);
        Result SetPtmBatteryLot(BatteryLot arg0);
        Result GetPtmFuelGaugeParameter(out PtmFuelGaugeParameter arg0);
        Result SetPtmFuelGaugeParameter(PtmFuelGaugeParameter arg0);
        Result GetBluetoothEnableFlag(out bool arg0);
        Result SetBluetoothEnableFlag(bool arg0);
        Result GetMiiAuthorId(out Uuid arg0);
        Result SetShutdownRtcValue(long arg0);
        Result GetShutdownRtcValue(out long arg0);
        Result AcquireFatalDirtyFlagEventHandle(out int arg0);
        Result GetFatalDirtyFlags(out FatalDirtyFlag arg0);
        Result GetAutoUpdateEnableFlag(out bool arg0);
        Result SetAutoUpdateEnableFlag(bool arg0);
        Result GetNxControllerSettings(out int arg0, Span<NxControllerLegacySettings> arg1);
        Result SetNxControllerSettings(ReadOnlySpan<NxControllerLegacySettings> arg0);
        Result GetBatteryPercentageFlag(out bool arg0);
        Result SetBatteryPercentageFlag(bool arg0);
        Result GetExternalRtcResetFlag(out bool arg0);
        Result SetExternalRtcResetFlag(bool arg0);
        Result GetUsbFullKeyEnableFlag(out bool arg0);
        Result SetUsbFullKeyEnableFlag(bool arg0);
        Result SetExternalSteadyClockInternalOffset(long arg0);
        Result GetExternalSteadyClockInternalOffset(out long arg0);
        Result GetBacklightSettingsEx(out BacklightSettingsEx arg0);
        Result SetBacklightSettingsEx(BacklightSettingsEx arg0);
        Result GetHeadphoneVolumeWarningCount(out int arg0);
        Result SetHeadphoneVolumeWarningCount(int arg0);
        Result GetBluetoothAfhEnableFlag(out bool arg0);
        Result SetBluetoothAfhEnableFlag(bool arg0);
        Result GetBluetoothBoostEnableFlag(out bool arg0);
        Result SetBluetoothBoostEnableFlag(bool arg0);
        Result GetInRepairProcessEnableFlag(out bool arg0);
        Result SetInRepairProcessEnableFlag(bool arg0);
        Result GetHeadphoneVolumeUpdateFlag(out bool arg0);
        Result SetHeadphoneVolumeUpdateFlag(bool arg0);
        Result NeedsToUpdateHeadphoneVolume(out bool arg0, out bool arg1, out sbyte arg2, bool arg3);
        Result GetPushNotificationActivityModeOnSleep(out int arg0);
        Result SetPushNotificationActivityModeOnSleep(int arg0);
        Result GetServiceDiscoveryControlSettings(out ServiceDiscoveryControlSettings arg0);
        Result SetServiceDiscoveryControlSettings(ServiceDiscoveryControlSettings arg0);
        Result GetErrorReportSharePermission(out int arg0);
        Result SetErrorReportSharePermission(int arg0);
        Result GetAppletLaunchFlags(out AppletLaunchFlag arg0);
        Result SetAppletLaunchFlags(AppletLaunchFlag arg0);
        Result GetConsoleSixAxisSensorAccelerationBias(out ConsoleSixAxisSensorAccelerationBias arg0);
        Result SetConsoleSixAxisSensorAccelerationBias(ConsoleSixAxisSensorAccelerationBias arg0);
        Result GetConsoleSixAxisSensorAngularVelocityBias(out ConsoleSixAxisSensorAngularVelocityBias arg0);
        Result SetConsoleSixAxisSensorAngularVelocityBias(ConsoleSixAxisSensorAngularVelocityBias arg0);
        Result GetConsoleSixAxisSensorAccelerationGain(out ConsoleSixAxisSensorAccelerationGain arg0);
        Result SetConsoleSixAxisSensorAccelerationGain(ConsoleSixAxisSensorAccelerationGain arg0);
        Result GetConsoleSixAxisSensorAngularVelocityGain(out ConsoleSixAxisSensorAngularVelocityGain arg0);
        Result SetConsoleSixAxisSensorAngularVelocityGain(ConsoleSixAxisSensorAngularVelocityGain arg0);
        Result GetKeyboardLayout(out int arg0);
        Result SetKeyboardLayout(int arg0);
        Result GetWebInspectorFlag(out bool arg0);
        Result GetAllowedSslHosts(out int arg0, Span<AllowedSslHost> arg1);
        Result GetHostFsMountPoint(out HostFsMountPoint arg0);
        Result GetRequiresRunRepairTimeReviser(out bool arg0);
        Result SetRequiresRunRepairTimeReviser(bool arg0);
        Result SetBlePairingSettings(ReadOnlySpan<BlePairingSettings> arg0);
        Result GetBlePairingSettings(out int arg0, Span<BlePairingSettings> arg1);
        Result GetConsoleSixAxisSensorAngularVelocityTimeBias(out ConsoleSixAxisSensorAngularVelocityTimeBias arg0);
        Result SetConsoleSixAxisSensorAngularVelocityTimeBias(ConsoleSixAxisSensorAngularVelocityTimeBias arg0);
        Result GetConsoleSixAxisSensorAngularAcceleration(out ConsoleSixAxisSensorAngularAcceleration arg0);
        Result SetConsoleSixAxisSensorAngularAcceleration(ConsoleSixAxisSensorAngularAcceleration arg0);
        Result GetRebootlessSystemUpdateVersion(out RebootlessSystemUpdateVersion arg0);
        Result GetDeviceTimeZoneLocationUpdatedTime(out SteadyClockTimePoint arg0);
        Result SetDeviceTimeZoneLocationUpdatedTime(SteadyClockTimePoint arg0);
        Result GetUserSystemClockAutomaticCorrectionUpdatedTime(out SteadyClockTimePoint arg0);
        Result SetUserSystemClockAutomaticCorrectionUpdatedTime(SteadyClockTimePoint arg0);
        Result GetAccountOnlineStorageSettings(out int arg0, Span<AccountOnlineStorageSettings> arg1);
        Result SetAccountOnlineStorageSettings(ReadOnlySpan<AccountOnlineStorageSettings> arg0);
        Result GetPctlReadyFlag(out bool arg0);
        Result SetPctlReadyFlag(bool arg0);
        Result GetAnalogStickUserCalibrationL(out AnalogStickUserCalibration arg0);
        Result SetAnalogStickUserCalibrationL(AnalogStickUserCalibration arg0);
        Result GetAnalogStickUserCalibrationR(out AnalogStickUserCalibration arg0);
        Result SetAnalogStickUserCalibrationR(AnalogStickUserCalibration arg0);
        Result GetPtmBatteryVersion(out byte arg0);
        Result SetPtmBatteryVersion(byte arg0);
        Result GetUsb30HostEnableFlag(out bool arg0);
        Result SetUsb30HostEnableFlag(bool arg0);
        Result GetUsb30DeviceEnableFlag(out bool arg0);
        Result SetUsb30DeviceEnableFlag(bool arg0);
        Result GetThemeId(out ThemeId arg0, int arg1);
        Result SetThemeId(ThemeId arg0, int arg1);
        Result GetChineseTraditionalInputMethod(out int arg0);
        Result SetChineseTraditionalInputMethod(int arg0);
        Result GetPtmCycleCountReliability(out int arg0);
        Result SetPtmCycleCountReliability(int arg0);
        Result GetHomeMenuScheme(out HomeMenuScheme arg0);
        Result GetThemeSettings(out ThemeSettings arg0);
        Result SetThemeSettings(ThemeSettings arg0);
        Result GetThemeKey(out ArchiveMacKey arg0);
        Result SetThemeKey(ArchiveMacKey arg0);
        Result GetZoomFlag(out bool arg0);
        Result SetZoomFlag(bool arg0);
        Result GetT(out bool arg0);
        Result SetT(bool arg0);
        Result GetPlatformRegion(out int arg0);
        Result SetPlatformRegion(int arg0);
        Result GetHomeMenuSchemeModel(out uint arg0);
        Result GetMemoryUsageRateFlag(out bool arg0);
        Result GetTouchScreenMode(out int arg0);
        Result SetTouchScreenMode(int arg0);
        Result GetButtonConfigSettingsFull(out int arg0, Span<ButtonConfigSettings> arg1);
        Result SetButtonConfigSettingsFull(ReadOnlySpan<ButtonConfigSettings> arg0);
        Result GetButtonConfigSettingsEmbedded(out int arg0, Span<ButtonConfigSettings> arg1);
        Result SetButtonConfigSettingsEmbedded(ReadOnlySpan<ButtonConfigSettings> arg0);
        Result GetButtonConfigSettingsLeft(out int arg0, Span<ButtonConfigSettings> arg1);
        Result SetButtonConfigSettingsLeft(ReadOnlySpan<ButtonConfigSettings> arg0);
        Result GetButtonConfigSettingsRight(out int arg0, Span<ButtonConfigSettings> arg1);
        Result SetButtonConfigSettingsRight(ReadOnlySpan<ButtonConfigSettings> arg0);
        Result GetButtonConfigRegisteredSettingsEmbedded(out ButtonConfigRegisteredSettings arg0);
        Result SetButtonConfigRegisteredSettingsEmbedded(in ButtonConfigRegisteredSettings arg0);
        Result GetButtonConfigRegisteredSettings(out int arg0, Span<ButtonConfigRegisteredSettings> arg1);
        Result SetButtonConfigRegisteredSettings(ReadOnlySpan<ButtonConfigRegisteredSettings> arg0);
        Result GetFieldTestingFlag(out bool arg0);
        Result SetFieldTestingFlag(bool arg0);
        Result GetPanelCrcMode(out int arg0);
        Result SetPanelCrcMode(int arg0);
        Result GetNxControllerSettingsEx(out int arg0, Span<NxControllerSettings> arg1);
        Result SetNxControllerSettingsEx(ReadOnlySpan<NxControllerSettings> arg0);
        Result GetHearingProtectionSafeguardFlag(out bool arg0);
        Result SetHearingProtectionSafeguardFlag(bool arg0);
        Result GetHearingProtectionSafeguardRemainingTime(out TimeSpanType arg0);
        Result SetHearingProtectionSafeguardRemainingTime(TimeSpanType arg0);
    }
}
