using Ryujinx.Horizon.Common;
using Ryujinx.Horizon.Sdk.Applet;
using Ryujinx.Horizon.Sdk.Bluetooth;
using Ryujinx.Horizon.Sdk.Hid.Server;
using Ryujinx.Horizon.Sdk.Hid.System;
using Ryujinx.Horizon.Sdk.Hidbus;
using Ryujinx.Horizon.Sdk.Hidconfig;
using Ryujinx.Horizon.Sdk.Sf;
using Ryujinx.Horizon.Sdk.Util;
using Ryujinx.Horizon.Sdk.Xcd;
using System;

namespace Ryujinx.Horizon.Sdk.Hid
{
    interface IHidSystemServer : IServiceObject
    {
        Result SendKeyboardLockKeyEvent(KeyboardLockKeyEvent arg0);
        Result AcquireHomeButtonEventHandle(out int arg0, AppletResourceUserId arg1);
        Result ActivateHomeButton(AppletResourceUserId arg0);
        Result AcquireSleepButtonEventHandle(out int arg0, AppletResourceUserId arg1);
        Result ActivateSleepButton(AppletResourceUserId arg0);
        Result AcquireCaptureButtonEventHandle(out int arg0, AppletResourceUserId arg1);
        Result ActivateCaptureButton(AppletResourceUserId arg0);
        Result GetPlatformConfig(out PlatformConfig arg0);
        Result AcquireNfcDeviceUpdateEventHandle(out int arg0);
        Result GetNpadsWithNfc(out long arg0, Span<uint> arg1);
        Result AcquireNfcActivateEventHandle(out int arg0, uint arg1);
        Result ActivateNfc(uint arg0, bool arg1, AppletResourceUserId arg2);
        Result GetXcdHandleForNpadWithNfc(out DeviceHandle arg0, uint arg1, AppletResourceUserId arg2);
        Result IsNfcActivated(out bool arg0, uint arg1);
        Result AcquireIrSensorEventHandle(out int arg0, uint arg1);
        Result ActivateIrSensor(uint arg0, bool arg1, AppletResourceUserId arg2);
        Result GetIrSensorState(uint arg0, out long arg1, AppletResourceUserId arg2);
        Result GetXcdHandleForNpadWithIrSensor(uint arg0, out DeviceHandle arg1, AppletResourceUserId arg2);
        Result ActivateNpadSystem(uint arg0);
        Result ApplyNpadSystemCommonPolicy(AppletResourceUserId arg0);
        Result EnableAssigningSingleOnSlSrPress(AppletResourceUserId arg0);
        Result DisableAssigningSingleOnSlSrPress(AppletResourceUserId arg0);
        Result GetLastActiveNpad(out uint arg0);
        Result GetNpadSystemExtStyle(out long arg0, out long arg1, uint arg2);
        Result ApplyNpadSystemCommonPolicyFull(AppletResourceUserId arg0);
        Result GetNpadFullKeyGripColor(out Unorm8x4 arg0, out Unorm8x4 arg1, uint arg2);
        Result GetMaskedSupportedNpadStyleSet(out NpadStyleTag arg0, AppletResourceUserId arg1);
        Result SetNpadPlayerLedBlinkingDevice(AppletResourceUserId arg0, uint arg1, DeviceType arg2);
        Result SetSupportedNpadStyleSetAll(AppletResourceUserId arg0);
        Result GetNpadCaptureButtonAssignment(out long arg0, Span<NpadCaptureButtonAssignmentType> arg1, AppletResourceUserId arg2);
        Result GetAppletFooterUiType(out AppletFooterUiType arg0, uint arg1);
        Result GetAppletDetailedUiType(out AppletDetailedUiType arg0, uint arg1);
        Result GetNpadInterfaceType(out byte arg0, uint arg1);
        Result GetNpadLeftRightInterfaceType(out byte arg0, out byte arg1, uint arg2);
        Result HasBattery(out bool arg0, uint arg1);
        Result HasLeftRightBattery(out bool arg0, out bool arg1, uint arg2);
        Result GetUniquePadsFromNpad(out long arg0, Span<UniquePadId> arg1, uint arg2);
        Result SetNpadSystemExtStateEnabled(AppletResourceUserId arg0, bool arg1);
        Result GetLastActiveUniquePad(out UniquePadId arg0);
        Result GetUniquePadButtonSet(out UniquePadButton arg0, UniquePadId arg1);
        Result GetUniquePadColor(out ControllerColor arg0, UniquePadId arg1);
        Result GetUniquePadAppletDetailedUiType(out AppletDetailedUiType arg0, UniquePadId arg1);
        Result GetAbstractedPadIdDataFromNpad(out long arg0, Span<long> arg1, uint arg2);
        Result AttachAbstractedPadToNpad(out bool arg0, long arg1, uint arg2);
        Result DetachAbstractedPadAll();
        Result CheckAbstractedPadConnection(long arg0);
        Result SetAppletResourceUserId(AppletResourceUserId arg0);
        Result RegisterAppletResourceUserId(AppletResourceUserId arg0, bool arg1);
        Result UnregisterAppletResourceUserId(AppletResourceUserId arg0);
        Result EnableAppletToGetInput(AppletResourceUserId arg0, bool arg1);
        Result SetAruidValidForVibration(AppletResourceUserId arg0, bool arg1);
        Result EnableAppletToGetSixAxisSensor(AppletResourceUserId arg0, bool arg1);
        Result EnableAppletToGetPadInput(AppletResourceUserId arg0, bool arg1);
        Result EnableAppletToGetTouchScreen(AppletResourceUserId arg0, bool arg1);
        Result SetVibrationMasterVolume(float arg0);
        Result GetVibrationMasterVolume(out float arg0);
        Result BeginPermitVibrationSession(AppletResourceUserId arg0);
        Result EndPermitVibrationSession();
        Result SendVibrationNotificationPattern(AppletResourceUserId arg0, VibrationDeviceHandle arg1, int arg2);
        Result EnableHandheldHids();
        Result DisableHandheldHids();
        Result SetJoyConRailEnabled(bool arg0);
        Result IsJoyConRailEnabled(out bool arg0);
        Result IsHandheldHidsEnabled(out bool arg0);
        Result IsJoyConAttachedOnAllRail(out bool arg0);
        Result AcquirePlayReportControllerUsageUpdateEvent(out int arg0);
        Result GetPlayReportControllerUsages(out long arg0, Span<PlayReportControllerUsage> arg1);
        Result AcquirePlayReportRegisteredDeviceUpdateEvent(out int arg0);
        Result GetRegisteredDevicesOld(out long arg0, Span<RegisteredDeviceOld> arg1);
        Result AcquireConnectionTriggerTimeoutEvent(out int arg0);
        Result SendConnectionTrigger(Address arg0);
        Result AcquireDeviceRegisteredEventForControllerSupport(out int arg0);
        Result GetAllowedBluetoothLinksCount(out long arg0);
        Result GetRegisteredDevices(out long arg0, Span<RegisteredDevice> arg1);
        Result GetConnectableRegisteredDevices(out long arg0, Span<RegisteredDevice> arg1);
        Result ActivateUniquePad(AppletResourceUserId arg0, UniquePadId arg1);
        Result AcquireUniquePadConnectionEventHandle(out int arg0);
        Result GetUniquePadIds(out long arg0, Span<UniquePadId> arg1);
        Result AcquireJoyDetachOnBluetoothOffEventHandle(out int arg0, AppletResourceUserId arg1);
        Result ListSixAxisSensorHandles(out long arg0, Span<UniqueSixAxisSensorHandle> arg1, UniquePadId arg2);
        Result IsSixAxisSensorUserCalibrationSupported(out bool arg0, UniqueSixAxisSensorHandle arg1);
        Result ResetSixAxisSensorCalibrationValues(UniqueSixAxisSensorHandle arg0);
        Result StartSixAxisSensorUserCalibration(UniqueSixAxisSensorHandle arg0);
        Result CancelSixAxisSensorUserCalibration(UniqueSixAxisSensorHandle arg0);
        Result GetUniquePadBluetoothAddress(out Address arg0, UniquePadId arg1);
        Result DisconnectUniquePad(UniquePadId arg0);
        Result GetUniquePadType(out long arg0, UniquePadId arg1);
        Result GetUniquePadInterface(out long arg0, UniquePadId arg1);
        Result GetUniquePadSerialNumber(out UniquePadSerialNumber arg0, UniquePadId arg1);
        Result GetUniquePadControllerNumber(out long arg0, UniquePadId arg1);
        Result GetSixAxisSensorUserCalibrationStage(out long arg0, UniqueSixAxisSensorHandle arg1);
        Result GetConsoleUniqueSixAxisSensorHandle(out UniqueSixAxisSensorHandle arg0);
        Result StartAnalogStickManualCalibration(UniquePadId arg0, long arg1);
        Result RetryCurrentAnalogStickManualCalibrationStage(UniquePadId arg0, long arg1);
        Result CancelAnalogStickManualCalibration(UniquePadId arg0, long arg1);
        Result ResetAnalogStickManualCalibration(UniquePadId arg0, long arg1);
        Result GetAnalogStickState(out AnalogStickState arg0, UniquePadId arg1, long arg2);
        Result GetAnalogStickManualCalibrationStage(out long arg0, UniquePadId arg1, long arg2);
        Result IsAnalogStickButtonPressed(out bool arg0, UniquePadId arg1, long arg2);
        Result IsAnalogStickInReleasePosition(out bool arg0, UniquePadId arg1, long arg2);
        Result IsAnalogStickInCircumference(out bool arg0, UniquePadId arg1, long arg2);
        Result SetNotificationLedPattern(NotificationLedPattern arg0, UniquePadId arg1);
        Result SetNotificationLedPatternWithTimeout(NotificationLedPattern arg0, UniquePadId arg1, long arg2);
        Result PrepareHidsForNotificationWake(ReadOnlySpan<UniquePadId> arg0);
        Result IsUsbFullKeyControllerEnabled(out bool arg0);
        Result EnableUsbFullKeyController(bool arg0);
        Result IsUsbConnected(out bool arg0, UniquePadId arg1);
        Result IsHandheldButtonPressedOnConsoleMode(out bool arg0);
        Result InitializeFirmwareUpdate();
        Result GetFirmwareVersion(out FirmwareVersion arg0, UniquePadId arg1);
        Result GetAvailableFirmwareVersion(out FirmwareVersion arg0, UniquePadId arg1);
        Result IsFirmwareUpdateAvailable(out bool arg0, UniquePadId arg1);
        Result CheckFirmwareUpdateRequired(out long arg0, UniquePadId arg1);
        Result StartFirmwareUpdate(out FirmwareUpdateDeviceHandle arg0, UniquePadId arg1);
        Result AbortFirmwareUpdate();
        Result GetFirmwareUpdateState(out FirmwareUpdateState arg0, FirmwareUpdateDeviceHandle arg1);
        Result ActivateAudioControl();
        Result AcquireAudioControlEventHandle(out int arg0);
        Result GetAudioControlStates(out long arg0, Span<AudioControlState> arg1);
        Result DeactivateAudioControl();
        Result IsSixAxisSensorAccurateUserCalibrationSupported(out bool arg0, UniqueSixAxisSensorHandle arg1, AppletResourceUserId arg2);
        Result StartSixAxisSensorAccurateUserCalibration(UniqueSixAxisSensorHandle arg0, AppletResourceUserId arg1);
        Result CancelSixAxisSensorAccurateUserCalibration(UniqueSixAxisSensorHandle arg0, AppletResourceUserId arg1);
        Result GetSixAxisSensorAccurateUserCalibrationState(out SixAxisSensorAccurateUserCalibrationState arg0, UniqueSixAxisSensorHandle arg1, AppletResourceUserId arg2);
        Result GetHidbusSystemServiceObject(out IHidbusSystemServer arg0);
        Result SetFirmwareHotfixUpdateSkipEnabled(bool arg0);
        Result InitializeUsbFirmwareUpdate(AppletResourceUserId arg0, int arg1, ulong arg2);
        Result FinalizeUsbFirmwareUpdate(AppletResourceUserId arg0);
        Result CheckUsbFirmwareUpdateRequired(AppletResourceUserId arg0, out long arg1);
        Result StartUsbFirmwareUpdate(AppletResourceUserId arg0);
        Result GetUsbFirmwareUpdateState(AppletResourceUserId arg0, out FirmwareUpdateState arg1, out int arg2, out int arg3);
        Result SetTouchScreenMagnification(float arg0, float arg1, float arg2, float arg3);
        Result GetTouchScreenFirmwareVersion(out FirmwareVersion arg0);
        Result SetTouchScreenDefaultConfiguration(TouchScreenConfigurationForNx arg0);
        Result GetTouchScreenDefaultConfiguration(out TouchScreenConfigurationForNx arg0);
        Result IsFirmwareAvailableForNotification(out bool arg0, int arg1, UniquePadId arg2, AppletResourceUserId arg3);
        Result SetForceHandheldStyleVibration(bool arg0);
        Result SendConnectionTriggerWithoutTimeoutEvent(Address arg0);
        Result CancelConnectionTrigger(Address arg0);
        Result IsButtonConfigSupported(out bool arg0, Address arg1);
        Result IsButtonConfigEmbeddedSupported(out bool arg0);
        Result DeleteButtonConfig(Address arg0);
        Result DeleteButtonConfigEmbedded();
        Result SetButtonConfigEnabled(bool arg0, Address arg1);
        Result SetButtonConfigEmbeddedEnabled(bool arg0);
        Result IsButtonConfigEnabled(out bool arg0, Address arg1);
        Result IsButtonConfigEmbeddedEnabled(out bool arg0);
        Result SetButtonConfigEmbedded(ButtonConfigEmbedded arg0);
        Result SetButtonConfigFull(ButtonConfigFull arg0, Address arg1);
        Result SetButtonConfigRight(ButtonConfigRight arg0, Address arg1);
        Result GetButtonConfigEmbedded(out ButtonConfigEmbedded arg0);
        Result GetButtonConfigFull(out ButtonConfigFull arg0, Address arg1);
        Result GetButtonConfigLeft(out ButtonConfigLeft arg0, Address arg1);
        Result GetButtonConfigRight(out ButtonConfigRight arg0, Address arg1);
        Result IsCustomButtonConfigSupported(out bool arg0, UniquePadId arg1);
        Result IsDefaultButtonConfigEmbedded(out bool arg0, ButtonConfigEmbedded arg1);
        Result IsDefaultButtonConfigFull(out bool arg0, ButtonConfigFull arg1);
        Result IsDefaultButtonConfigLeft(out bool arg0, ButtonConfigLeft arg1);
        Result IsDefaultButtonConfigRight(out bool arg0, ButtonConfigRight arg1);
        Result IsButtonConfigStorageEmbeddedEmpty(out bool arg0, int arg1);
        Result IsButtonConfigStorageFullEmpty(out bool arg0, int arg1);
        Result IsButtonConfigStorageLeftEmpty(out bool arg0, int arg1);
        Result IsButtonConfigStorageRightEmpty(out bool arg0, int arg1);
        Result DeleteButtonConfigStorageEmbedded(int arg0);
        Result DeleteButtonConfigStorageFull(int arg0);
        Result DeleteButtonConfigStorageLeft(int arg0);
        Result DeleteButtonConfigStorageRight(int arg0);
        Result IsUsingCustomButtonConfig(out bool arg0, UniquePadId arg1);
        Result IsAnyCustomButtonConfigEnabled(out bool arg0);
        Result SetAllCustomButtonConfigEnabled(bool arg0, AppletResourceUserId arg1);
        Result SetDefaultButtonConfig(UniquePadId arg0);
        Result SetAllDefaultButtonConfig();
        Result SetHidButtonConfigEmbedded(ButtonConfigEmbedded arg0, UniquePadId arg1);
        Result SetHidButtonConfigFull(ButtonConfigFull arg0, UniquePadId arg1);
        Result SetHidButtonConfigLeft(ButtonConfigLeft arg0, UniquePadId arg1);
        Result SetHidButtonConfigRight(ButtonConfigRight arg0, UniquePadId arg1);
        Result GetHidButtonConfigEmbedded(out ButtonConfigEmbedded arg0, UniquePadId arg1);
        Result GetHidButtonConfigFull(out ButtonConfigFull arg0, UniquePadId arg1);
        Result GetHidButtonConfigLeft(out ButtonConfigLeft arg0, UniquePadId arg1);
        Result GetHidButtonConfigRight(out ButtonConfigRight arg0, UniquePadId arg1);
        Result GetButtonConfigStorageEmbedded(out ButtonConfigEmbedded arg0, out StorageName arg1, int arg2);
        Result GetButtonConfigStorageFull(out ButtonConfigFull arg0, out StorageName arg1, int arg2);
        Result GetButtonConfigStorageLeft(out ButtonConfigLeft arg0, out StorageName arg1, int arg2);
        Result GetButtonConfigStorageRight(out ButtonConfigRight arg0, out StorageName arg1, int arg2);
        Result SetButtonConfigStorageEmbedded(ButtonConfigEmbedded arg0, StorageName arg1, int arg2);
        Result SetButtonConfigStorageFull(ButtonConfigFull arg0, StorageName arg1, int arg2);
        Result SetButtonConfigStorageLeft(ButtonConfigLeft arg0, StorageName arg1, int arg2);
        Result SetButtonConfigStorageRight(ButtonConfigRight arg0, StorageName arg1, int arg2);
        Result SetButtonConfigLeft(ButtonConfigLeft arg0, Address arg1);
    }
}
