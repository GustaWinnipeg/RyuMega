using Ryujinx.Horizon.Common;
using Ryujinx.Horizon.Sdk.Applet;
using Ryujinx.Horizon.Sdk.Sf;
using Ryujinx.Horizon.Sdk.Vi;
using Ryujinx.Horizon.Sdk.Vi.Fbshare;
using System;

namespace Ryujinx.Horizon.Sdk.Visrv.Sf
{
    interface IManagerDisplayService : IServiceObject
    {
        Result AllocateProcessHeapBlock(out ulong arg0, ulong arg1);
        Result FreeProcessHeapBlock(ulong arg0);
        Result GetDisplayResolution(out long arg0, out long arg1, ulong arg2);
        Result CreateManagedLayer(out ulong arg0, ulong arg1, uint arg2, AppletResourceUserId arg3);
        Result DestroyManagedLayer(ulong arg0);
        Result CreateStrayLayer(out ulong arg0, out long arg1, Span<byte> arg2, ulong arg3, uint arg4);
        Result CreateIndirectLayer(out ulong arg0);
        Result DestroyIndirectLayer(ulong arg0);
        Result CreateIndirectProducerEndPoint(out ulong arg0, ulong arg1, AppletResourceUserId arg2);
        Result DestroyIndirectProducerEndPoint(ulong arg0);
        Result CreateIndirectConsumerEndPoint(out ulong arg0, ulong arg1, AppletResourceUserId arg2);
        Result DestroyIndirectConsumerEndPoint(ulong arg0);
        Result AcquireLayerTexturePresentingEvent(out int arg0, ulong arg1);
        Result ReleaseLayerTexturePresentingEvent(ulong arg0);
        Result GetDisplayHotplugEvent(out int arg0, ulong arg1);
        Result GetDisplayModeChangedEvent(out int arg0, ulong arg1);
        Result GetDisplayHotplugState(out uint arg0, ulong arg1);
        Result GetCompositorErrorInfo(out CompositorError arg0, out int arg1, long arg2, ulong arg3);
        Result GetDisplayErrorEvent(out int arg0, ulong arg1);
        Result GetDisplayFatalErrorEvent(out int arg0, ulong arg1);
        Result SetDisplayAlpha(ulong arg0, float arg1);
        Result SetDisplayLayerStack(ulong arg0, uint arg1);
        Result SetDisplayPowerState(ulong arg0, uint arg1);
        Result SetDefaultDisplay(ulong arg0);
        Result ResetDisplayPanel(ulong arg0);
        Result SetDisplayFatalErrorEnabled(ulong arg0, bool arg1);
        Result IsDisplayPanelOn(out bool arg0, ulong arg1);
        Result GetInternalPanelId(out byte arg0, out byte arg1, out byte arg2, ulong arg3);
        Result AddToLayerStack(ulong arg0, uint arg1);
        Result RemoveFromLayerStack(ulong arg0, uint arg1);
        Result SetLayerVisibility(ulong arg0, bool arg1);
        Result SetLayerConfig(ulong arg0, LayerConfig arg1);
        Result AttachLayerPresentationTracer(ulong arg0, uint arg1);
        Result DetachLayerPresentationTracer(ulong arg0);
        Result StartLayerPresentationRecording(ulong arg0);
        Result StopLayerPresentationRecording(ulong arg0);
        Result StartLayerPresentationFenceWait(ulong arg0);
        Result StopLayerPresentationFenceWait(ulong arg0);
        Result GetLayerPresentationAllFencesExpiredEvent(out int arg0, ulong arg1);
        Result EnableLayerAutoClearTransitionBuffer(ulong arg0, SharedBufferHandle arg1, long arg2, uint arg3, SharedTextureOption arg4);
        Result DisableLayerAutoClearTransitionBuffer(ulong arg0);
        Result SetLayerOpacity(ulong arg0, bool arg1);
        Result SetContentVisibility(bool arg0);
        Result SetConductorLayer(ulong arg0, bool arg1);
        Result SetTimestampTracking(ulong arg0, bool arg1);
        Result SetIndirectProducerFlipOffset(ulong arg0, ulong arg1, TimeSpan arg2);
        Result CreateSharedBufferStaticStorage(out SharedBufferHandle arg0, ulong arg1, SharedMemoryPoolLayout arg2);
        Result CreateSharedBufferTransferMemory(out SharedBufferHandle arg0, int arg1, ulong arg2, SharedMemoryPoolLayout arg3);
        Result DestroySharedBuffer(SharedBufferHandle arg0);
        Result BindSharedLowLevelLayerToManagedLayer(ulong arg0, DisplayName arg1, AppletResourceUserId arg2);
        Result BindSharedLowLevelLayerToIndirectLayer(ulong arg0, AppletResourceUserId arg1);
        Result UnbindSharedLowLevelLayer(ulong arg0);
        Result ConnectSharedLowLevelLayerToSharedBuffer(ulong arg0, SharedBufferHandle arg1);
        Result DisconnectSharedLowLevelLayerFromSharedBuffer(ulong arg0);
        Result CreateSharedLayer(out SharedLayerHandle arg0, AppletResourceUserId arg1);
        Result DestroySharedLayer(SharedLayerHandle arg0);
        Result AttachSharedLayerToLowLevelLayer(SharedLayerHandle arg0, ulong arg1, SharedLayerTextureIndexList arg2);
        Result ForceDetachSharedLayerFromLowLevelLayer(SharedLayerHandle arg0);
        Result StartDetachSharedLayerFromLowLevelLayer(SharedLayerHandle arg0);
        Result FinishDetachSharedLayerFromLowLevelLayer(SharedLayerHandle arg0);
        Result GetSharedLayerDetachReadyEvent(out int arg0, SharedLayerHandle arg1);
        Result GetSharedLowLevelLayerSynchronizedEvent(out int arg0, ulong arg1);
        Result CheckSharedLowLevelLayerSynchronized(out long arg0, ulong arg1);
        Result RegisterSharedBufferImporterAruid(SharedBufferHandle arg0, AppletResourceUserId arg1);
        Result UnregisterSharedBufferImporterAruid(SharedBufferHandle arg0, AppletResourceUserId arg1);
        Result CreateSharedBufferProcessHeap(out SharedBufferHandle arg0, ulong arg1, SharedMemoryPoolLayout arg2);
        Result GetSharedLayerLayerStacks(out uint arg0, SharedLayerHandle arg1);
        Result SetSharedLayerLayerStacks(SharedLayerHandle arg0, uint arg1);
        Result PresentDetachedSharedFrameBufferToLowLevelLayer(SharedBufferHandle arg0, ulong arg1, long arg2);
        Result FillDetachedSharedFrameBufferColor(SharedBufferHandle arg0, long arg1, uint arg2, SharedTextureOption arg3);
        Result GetDetachedSharedFrameBufferImage(out ulong arg0, Span<byte> arg1, SharedBufferHandle arg2, long arg3);
        Result SetDetachedSharedFrameBufferImage(SharedBufferHandle arg0, long arg1, ReadOnlySpan<byte> arg2, SharedTextureOption arg3, uint arg4);
        Result CopyDetachedSharedFrameBufferImage(SharedBufferHandle arg0, long arg1, SharedBufferHandle arg2, long arg3, SharedTextureOption arg4, uint arg5, uint arg6);
        Result SetDetachedSharedFrameBufferSubImage(SharedBufferHandle arg0, long arg1, int arg2, int arg3, int arg4, int arg5, uint arg6, ReadOnlySpan<byte> arg7, SharedTextureOption arg8, uint arg9);
        Result GetSharedFrameBufferContentParameter(out uint arg0, out CropRegion arg1, out int arg2, out uint arg3, out int arg4, SharedBufferHandle arg5, long arg6);
        Result ExpandStartupLogoOnSharedFrameBuffer(SharedBufferHandle arg0, long arg1, SharedTextureOption arg2);
    }
}
