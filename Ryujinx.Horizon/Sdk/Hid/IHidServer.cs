using Ryujinx.Horizon.Common;
using Ryujinx.Horizon.Sdk.Applet;
using Ryujinx.Horizon.Sdk.Bluetooth;
using Ryujinx.Horizon.Sdk.Sf;
using System;

namespace Ryujinx.Horizon.Sdk.Hid
{
    interface IHidServer : IServiceObject
    {
        Result CreateAppletResource(out IAppletResource arg0, AppletResourceUserId arg1, ulong pid);
        Result ActivateDebugPad(AppletResourceUserId arg0, ulong pid);
        Result ActivateTouchScreen(AppletResourceUserId arg0, ulong pid);
        Result ActivateMouse(AppletResourceUserId arg0, ulong pid);
        Result ActivateKeyboard(AppletResourceUserId arg0, ulong pid);
        Result SendKeyboardLockKeyEvent(AppletResourceUserId arg0, KeyboardLockKeyEvent arg1, ulong pid);
        Result AcquireXpadIdEventHandle(out int arg0, ulong arg1);
        Result ReleaseXpadIdEventHandle(ulong arg0);
        Result ActivateXpad(AppletResourceUserId arg0, BasicXpadId arg1, ulong pid);
        Result GetXpadIds(out long arg0, Span<BasicXpadId> arg1);
        Result ActivateJoyXpad(JoyXpadId arg0);
        Result GetJoyXpadLifoHandle(out int arg0, JoyXpadId arg1);
        Result GetJoyXpadIds(out long arg0, Span<JoyXpadId> arg1);
        Result ActivateSixAxisSensor(BasicXpadId arg0);
        Result DeactivateSixAxisSensor(BasicXpadId arg0);
        Result GetSixAxisSensorLifoHandle(out int arg0, BasicXpadId arg1);
        Result ActivateJoySixAxisSensor(JoyXpadId arg0);
        Result DeactivateJoySixAxisSensor(JoyXpadId arg0);
        Result GetJoySixAxisSensorLifoHandle(out int arg0, JoyXpadId arg1);
        Result StartSixAxisSensor(AppletResourceUserId arg0, SixAxisSensorHandle arg1, ulong pid);
        Result StopSixAxisSensor(AppletResourceUserId arg0, SixAxisSensorHandle arg1, ulong pid);
        Result IsSixAxisSensorFusionEnabled(out bool arg0, AppletResourceUserId arg1, SixAxisSensorHandle arg2, ulong pid);
        Result EnableSixAxisSensorFusion(AppletResourceUserId arg0, SixAxisSensorHandle arg1, bool arg2, ulong pid);
        Result SetSixAxisSensorFusionParameters(AppletResourceUserId arg0, SixAxisSensorHandle arg1, float arg2, float arg3, ulong pid);
        Result GetSixAxisSensorFusionParameters(out float arg0, out float arg1, AppletResourceUserId arg2, SixAxisSensorHandle arg3, ulong pid);
        Result ResetSixAxisSensorFusionParameters(AppletResourceUserId arg0, SixAxisSensorHandle arg1, ulong pid);
        Result SetAccelerometerParameters(AppletResourceUserId arg0, SixAxisSensorHandle arg1, float arg2, float arg3, ulong pid);
        Result GetAccelerometerParameters(out float arg0, out float arg1, AppletResourceUserId arg2, SixAxisSensorHandle arg3, ulong pid);
        Result ResetAccelerometerParameters(AppletResourceUserId arg0, SixAxisSensorHandle arg1, ulong pid);
        Result SetAccelerometerPlayMode(AppletResourceUserId arg0, SixAxisSensorHandle arg1, uint arg2, ulong pid);
        Result GetAccelerometerPlayMode(out uint arg0, AppletResourceUserId arg1, SixAxisSensorHandle arg2, ulong pid);
        Result ResetAccelerometerPlayMode(AppletResourceUserId arg0, SixAxisSensorHandle arg1, ulong pid);
        Result SetGyroscopeZeroDriftMode(AppletResourceUserId arg0, SixAxisSensorHandle arg1, uint arg2, ulong pid);
        Result GetGyroscopeZeroDriftMode(out uint arg0, AppletResourceUserId arg1, SixAxisSensorHandle arg2, ulong pid);
        Result ResetGyroscopeZeroDriftMode(AppletResourceUserId arg0, SixAxisSensorHandle arg1, ulong pid);
        Result IsSixAxisSensorAtRest(out bool arg0, AppletResourceUserId arg1, SixAxisSensorHandle arg2, ulong pid);
        Result IsFirmwareUpdateAvailableForSixAxisSensor(out bool arg0, AppletResourceUserId arg1, SixAxisSensorHandle arg2, ulong pid);
        Result EnableSixAxisSensorUnalteredPassthrough(AppletResourceUserId arg0, SixAxisSensorHandle arg1, bool arg2, ulong pid);
        Result IsSixAxisSensorUnalteredPassthroughEnabled(out bool arg0, AppletResourceUserId arg1, SixAxisSensorHandle arg2, ulong pid);
        Result StoreSixAxisSensorCalibrationParameter(AppletResourceUserId arg0, SixAxisSensorHandle arg1, in SixAxisSensorCalibrationParameter arg2, ulong pid);
        Result LoadSixAxisSensorCalibrationParameter(AppletResourceUserId arg0, out SixAxisSensorCalibrationParameter arg1, SixAxisSensorHandle arg2, ulong pid);
        Result GetSixAxisSensorIcInformation(AppletResourceUserId arg0, out SixAxisSensorIcInformation arg1, SixAxisSensorHandle arg2, ulong pid);
        Result ResetIsSixAxisSensorDeviceNewlyAssigned(AppletResourceUserId arg0, SixAxisSensorHandle arg1, ulong pid);
        Result ActivateGesture(AppletResourceUserId arg0, int arg1, ulong pid);
        Result SetSupportedNpadStyleSet(AppletResourceUserId arg0, NpadStyleTag arg1, ulong pid);
        Result GetSupportedNpadStyleSet(AppletResourceUserId arg0, out NpadStyleTag arg1, ulong pid);
        Result SetSupportedNpadIdType(AppletResourceUserId arg0, ReadOnlySpan<uint> arg1, ulong pid);
        Result ActivateNpad(AppletResourceUserId arg0, ulong pid);
        Result DeactivateNpad(AppletResourceUserId arg0, ulong pid);
        Result AcquireNpadStyleSetUpdateEventHandle(AppletResourceUserId arg0, out int arg1, uint arg2, ulong arg3, ulong pid);
        Result DisconnectNpad(AppletResourceUserId arg0, uint arg1, ulong pid);
        Result GetPlayerLedPattern(out ulong arg0, uint arg1);
        Result ActivateNpadWithRevision(AppletResourceUserId arg0, int arg1, ulong pid);
        Result SetNpadJoyHoldType(AppletResourceUserId arg0, long arg1, ulong pid);
        Result GetNpadJoyHoldType(AppletResourceUserId arg0, out long arg1, ulong pid);
        Result SetNpadJoyAssignmentModeSingleByDefault(AppletResourceUserId arg0, uint arg1, ulong pid);
        Result SetNpadJoyAssignmentModeSingle(AppletResourceUserId arg0, uint arg1, long arg2, ulong pid);
        Result SetNpadJoyAssignmentModeDual(AppletResourceUserId arg0, uint arg1, ulong pid);
        Result MergeSingleJoyAsDualJoy(AppletResourceUserId arg0, uint arg1, uint arg2, ulong pid);
        Result StartLrAssignmentMode(AppletResourceUserId arg0, ulong pid);
        Result StopLrAssignmentMode(AppletResourceUserId arg0, ulong pid);
        Result SetNpadHandheldActivationMode(AppletResourceUserId arg0, long arg1, ulong pid);
        Result GetNpadHandheldActivationMode(AppletResourceUserId arg0, out long arg1, ulong pid);
        Result SwapNpadAssignment(AppletResourceUserId arg0, uint arg1, uint arg2, ulong pid);
        Result IsUnintendedHomeButtonInputProtectionEnabled(out bool arg0, AppletResourceUserId arg1, uint arg2, ulong pid);
        Result EnableUnintendedHomeButtonInputProtection(AppletResourceUserId arg0, uint arg1, bool arg2, ulong pid);
        Result SetNpadJoyAssignmentModeSingleWithDestination(out bool arg0, out uint arg1, AppletResourceUserId arg2, uint arg3, long arg4, ulong pid);
        Result SetNpadAnalogStickUseCenterClamp(AppletResourceUserId arg0, bool arg1, ulong pid);
        Result SetNpadCaptureButtonAssignment(AppletResourceUserId arg0, NpadStyleTag arg1, NpadButton arg2, ulong pid);
        Result ClearNpadCaptureButtonAssignment(AppletResourceUserId arg0, ulong pid);
        Result GetVibrationDeviceInfo(out VibrationDeviceInfoForIpc arg0, VibrationDeviceHandle arg1);
        Result SendVibrationValue(AppletResourceUserId arg0, VibrationDeviceHandle arg1, VibrationValue arg2, ulong pid);
        Result GetActualVibrationValue(out VibrationValue arg0, AppletResourceUserId arg1, VibrationDeviceHandle arg2, ulong pid);
        Result CreateActiveVibrationDeviceList(out IActiveVibrationDeviceList arg0);
        Result PermitVibration(bool arg0);
        Result IsVibrationPermitted(out bool arg0);
        Result SendVibrationValues(AppletResourceUserId arg0, ReadOnlySpan<VibrationDeviceHandle> arg1, ReadOnlySpan<VibrationValue> arg2);
        Result SendVibrationGcErmCommand(AppletResourceUserId arg0, VibrationDeviceHandle arg1, VibrationGcErmCommand arg2, ulong pid);
        Result GetActualVibrationGcErmCommand(out VibrationGcErmCommand arg0, AppletResourceUserId arg1, VibrationDeviceHandle arg2, ulong pid);
        Result BeginPermitVibrationSession(AppletResourceUserId arg0);
        Result EndPermitVibrationSession();
        Result IsVibrationDeviceMounted(out bool arg0, AppletResourceUserId arg1, VibrationDeviceHandle arg2, ulong pid);
        Result SendVibrationValueInBool(AppletResourceUserId arg0, VibrationDeviceHandle arg1, bool arg2, ulong pid);
        Result ActivateConsoleSixAxisSensor(AppletResourceUserId arg0, ulong pid);
        Result StartConsoleSixAxisSensor(AppletResourceUserId arg0, ConsoleSixAxisSensorHandle arg1, ulong pid);
        Result StopConsoleSixAxisSensor(AppletResourceUserId arg0, ConsoleSixAxisSensorHandle arg1, ulong pid);
        Result ActivateSevenSixAxisSensor(AppletResourceUserId arg0, ulong pid);
        Result StartSevenSixAxisSensor(AppletResourceUserId arg0, ulong pid);
        Result StopSevenSixAxisSensor(AppletResourceUserId arg0, ulong pid);
        Result InitializeSevenSixAxisSensor(AppletResourceUserId arg0, int arg1, ulong arg2, int arg3, ulong arg4, ulong pid);
        Result FinalizeSevenSixAxisSensor(AppletResourceUserId arg0, ulong pid);
        Result SetSevenSixAxisSensorFusionStrength(AppletResourceUserId arg0, float arg1, ulong pid);
        Result GetSevenSixAxisSensorFusionStrength(out float arg0, AppletResourceUserId arg1, ulong pid);
        Result ResetSevenSixAxisSensorTimestamp(AppletResourceUserId arg0, ulong pid);
        Result IsUsbFullKeyControllerEnabled(out bool arg0);
        Result EnableUsbFullKeyController(bool arg0);
        Result IsUsbFullKeyControllerConnected(out bool arg0, uint arg1);
        Result HasBattery(out bool arg0, uint arg1);
        Result HasLeftRightBattery(out bool arg0, out bool arg1, uint arg2);
        Result GetNpadInterfaceType(out byte arg0, uint arg1);
        Result GetNpadLeftRightInterfaceType(out byte arg0, out byte arg1, uint arg2);
        Result GetNpadOfHighestBatteryLevel(out uint arg0, ReadOnlySpan<uint> arg1, AppletResourceUserId arg2, ulong pid);
        Result GetPalmaConnectionHandle(out PalmaConnectionHandle arg0, uint arg1, AppletResourceUserId arg2, ulong pid);
        Result InitializePalma(PalmaConnectionHandle arg0);
        Result AcquirePalmaOperationCompleteEvent(out int arg0, PalmaConnectionHandle arg1);
        Result GetPalmaOperationInfo(out ulong arg0, Span<byte> arg1, PalmaConnectionHandle arg2);
        Result PlayPalmaActivity(PalmaConnectionHandle arg0, ulong arg1);
        Result SetPalmaFrModeType(PalmaConnectionHandle arg0, ulong arg1);
        Result ReadPalmaStep(PalmaConnectionHandle arg0);
        Result EnablePalmaStep(PalmaConnectionHandle arg0, bool arg1);
        Result ResetPalmaStep(PalmaConnectionHandle arg0);
        Result ReadPalmaApplicationSection(PalmaConnectionHandle arg0, ulong arg1, ulong arg2);
        Result WritePalmaApplicationSection(PalmaConnectionHandle arg0, ulong arg1, ulong arg2, in PalmaApplicationSectionAccessBuffer arg3);
        Result ReadPalmaUniqueCode(PalmaConnectionHandle arg0);
        Result SetPalmaUniqueCodeInvalid(PalmaConnectionHandle arg0);
        Result WritePalmaActivityEntry(PalmaConnectionHandle arg0, ulong arg1, ulong arg2, ulong arg3, ulong arg4);
        Result WritePalmaRgbLedPatternEntry(PalmaConnectionHandle arg0, ulong arg1, ReadOnlySpan<byte> arg2);
        Result WritePalmaWaveEntry(PalmaConnectionHandle arg0, ulong arg1, ulong arg2, int arg3, ulong arg4, ulong arg5);
        Result SetPalmaDataBaseIdentificationVersion(PalmaConnectionHandle arg0, int arg1);
        Result GetPalmaDataBaseIdentificationVersion(PalmaConnectionHandle arg0);
        Result SuspendPalmaFeature(PalmaConnectionHandle arg0, PalmaFeature arg1);
        Result GetPalmaOperationResult(PalmaConnectionHandle arg0);
        Result ReadPalmaPlayLog(PalmaConnectionHandle arg0, ushort arg1);
        Result ResetPalmaPlayLog(PalmaConnectionHandle arg0, ushort arg1);
        Result SetIsPalmaAllConnectable(AppletResourceUserId arg0, bool arg1, ulong pid);
        Result SetIsPalmaPairedConnectable(AppletResourceUserId arg0, bool arg1, ulong pid);
        Result PairPalma(PalmaConnectionHandle arg0);
        Result SetPalmaBoostMode(bool arg0);
        Result CancelWritePalmaWaveEntry(PalmaConnectionHandle arg0);
        Result EnablePalmaBoostMode(AppletResourceUserId arg0, bool arg1, ulong pid);
        Result GetPalmaBluetoothAddress(out Address arg0, PalmaConnectionHandle arg1);
        Result SetDisallowedPalmaConnection(AppletResourceUserId arg0, ReadOnlySpan<Address> arg1, ulong pid);
        Result SetNpadCommunicationMode(AppletResourceUserId arg0, long arg1, ulong pid);
        Result GetNpadCommunicationMode(out long arg0);
        Result SetTouchScreenConfiguration(AppletResourceUserId arg0, TouchScreenConfigurationForNx arg1, ulong pid);
        Result IsFirmwareUpdateNeededForNotification(out bool arg0, int arg1, AppletResourceUserId arg2, ulong pid);
        Result ActivateDigitizer(AppletResourceUserId arg0, ulong pid);
    }
}
