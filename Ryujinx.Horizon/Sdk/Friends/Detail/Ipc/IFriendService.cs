using Ryujinx.Horizon.Common;
using Ryujinx.Horizon.Sdk.Account;
using Ryujinx.Horizon.Sdk.Settings;
using Ryujinx.Horizon.Sdk.Sf;
using System;

namespace Ryujinx.Horizon.Sdk.Friends.Detail.Ipc
{
    interface IFriendService : IServiceObject
    {
        Result GetCompletionEvent(out int arg0);
        Result Cancel();
        Result GetFriendListIds(out int arg0, Span<NetworkServiceAccountId> arg1, Uid arg2, int arg3, SizedFriendFilter arg4, ulong arg5, ulong pid);
        Result GetFriendList(out int arg0, Span<FriendImpl> arg1, Uid arg2, int arg3, SizedFriendFilter arg4, ulong arg5, ulong pid);
        Result UpdateFriendInfo(Span<FriendImpl> arg0, Uid arg1, ReadOnlySpan<NetworkServiceAccountId> arg2, ulong arg3, ulong pid);
        Result GetFriendProfileImage(out int arg0, Uid arg1, NetworkServiceAccountId arg2, Span<byte> arg3);
        Result CheckFriendListAvailability(out bool arg0, Uid arg1);
        Result EnsureFriendListAvailable(Uid arg0);
        Result SendFriendRequestForApplication(Uid arg0, NetworkServiceAccountId arg1, in InAppScreenName arg2, in InAppScreenName arg3, ulong arg4, ulong pid);
        Result AddFacedFriendRequestForApplication(Uid arg0, FacedFriendRequestRegistrationKey arg1, Nickname arg2, ReadOnlySpan<byte> arg3, in InAppScreenName arg4, in InAppScreenName arg5, ulong arg6, ulong pid);
        Result GetBlockedUserListIds(out int arg0, Span<NetworkServiceAccountId> arg1, Uid arg2, int arg3);
        Result CheckBlockedUserListAvailability(out bool arg0, Uid arg1);
        Result EnsureBlockedUserListAvailable(Uid arg0);
        Result GetProfileList(Span<ProfileImpl> arg0, Uid arg1, ReadOnlySpan<NetworkServiceAccountId> arg2);
        Result DeclareOpenOnlinePlaySession(Uid arg0);
        Result DeclareCloseOnlinePlaySession(Uid arg0);
        Result UpdateUserPresence(Uid arg0, in UserPresenceImpl arg1, ulong arg2, ulong pid);
        Result GetPlayHistoryRegistrationKey(out PlayHistoryRegistrationKey arg0, Uid arg1, bool arg2);
        Result GetPlayHistoryRegistrationKeyWithNetworkServiceAccountId(out PlayHistoryRegistrationKey arg0, NetworkServiceAccountId arg1, bool arg2);
        Result AddPlayHistory(Uid arg0, in PlayHistoryRegistrationKey arg1, in InAppScreenName arg2, in InAppScreenName arg3, ulong arg4, ulong pid);
        Result GetProfileImageUrl(out Url arg0, Url arg1, int arg2);
        Result GetFriendCount(out int arg0, Uid arg1, SizedFriendFilter arg2, ulong arg3, ulong pid);
        Result GetNewlyFriendCount(out int arg0, Uid arg1);
        Result GetFriendDetailedInfo(out FriendDetailedInfoImpl arg0, Uid arg1, NetworkServiceAccountId arg2);
        Result SyncFriendList(Uid arg0);
        Result RequestSyncFriendList(Uid arg0);
        Result LoadFriendSetting(out FriendSettingImpl arg0, Uid arg1, NetworkServiceAccountId arg2);
        Result GetReceivedFriendRequestCount(out int arg0, out int arg1, Uid arg2);
        Result GetFriendRequestList(out int arg0, Span<FriendRequestImpl> arg1, Uid arg2, int arg3, int arg4);
        Result GetFriendCandidateList(out int arg0, Span<FriendCandidateImpl> arg1, Uid arg2, int arg3);
        Result GetNintendoNetworkIdInfo(out NintendoNetworkIdUserInfo arg0, out int arg1, Span<NintendoNetworkIdFriendImpl> arg2, Uid arg3, int arg4);
        Result GetSnsAccountLinkage(out SnsAccountLinkage arg0, Uid arg1);
        Result GetSnsAccountProfile(out SnsAccountProfile arg0, Uid arg1, NetworkServiceAccountId arg2, int arg3);
        Result GetSnsAccountFriendList(out int arg0, Span<SnsAccountFriendImpl> arg1, Uid arg2, int arg3);
        Result GetBlockedUserList(out int arg0, Span<BlockedUserImpl> arg1, Uid arg2, int arg3);
        Result SyncBlockedUserList(Uid arg0);
        Result GetProfileExtraList(Span<ProfileExtraImpl> arg0, Uid arg1, ReadOnlySpan<NetworkServiceAccountId> arg2);
        Result GetRelationship(out Relationship arg0, Uid arg1, NetworkServiceAccountId arg2);
        Result GetUserPresenceView(out UserPresenceViewImpl arg0, Uid arg1);
        Result GetPlayHistoryList(out int arg0, Span<PlayHistoryImpl> arg1, Uid arg2, int arg3);
        Result GetPlayHistoryStatistics(out PlayHistoryStatistics arg0, Uid arg1);
        Result LoadUserSetting(out UserSettingImpl arg0, Uid arg1);
        Result SyncUserSetting(Uid arg0);
        Result RequestListSummaryOverlayNotification();
        Result GetExternalApplicationCatalog(out ExternalApplicationCatalog arg0, ExternalApplicationCatalogId arg1, LanguageCode arg2);
        Result GetReceivedFriendInvitationList(out int arg0, Span<FriendInvitationForViewerImpl> arg1, Uid arg2);
        Result GetReceivedFriendInvitationDetailedInfo(out FriendInvitationGroupImpl arg0, Uid arg1, FriendInvitationGroupId arg2);
        Result GetReceivedFriendInvitationCountCache(out int arg0, Uid arg1);
        Result DropFriendNewlyFlags(Uid arg0);
        Result DeleteFriend(Uid arg0, NetworkServiceAccountId arg1);
        Result DropFriendNewlyFlag(Uid arg0, NetworkServiceAccountId arg1);
        Result ChangeFriendFavoriteFlag(Uid arg0, NetworkServiceAccountId arg1, bool arg2);
        Result ChangeFriendOnlineNotificationFlag(Uid arg0, NetworkServiceAccountId arg1, bool arg2);
        Result SendFriendRequest(Uid arg0, NetworkServiceAccountId arg1, int arg2);
        Result SendFriendRequestWithApplicationInfo(Uid arg0, NetworkServiceAccountId arg1, int arg2, ApplicationInfo arg3, in InAppScreenName arg4, in InAppScreenName arg5);
        Result CancelFriendRequest(Uid arg0, RequestId arg1);
        Result AcceptFriendRequest(Uid arg0, RequestId arg1);
        Result RejectFriendRequest(Uid arg0, RequestId arg1);
        Result ReadFriendRequest(Uid arg0, RequestId arg1);
        Result GetFacedFriendRequestRegistrationKey(out FacedFriendRequestRegistrationKey arg0, Uid arg1);
        Result AddFacedFriendRequest(Uid arg0, FacedFriendRequestRegistrationKey arg1, Nickname arg2, ReadOnlySpan<byte> arg3);
        Result CancelFacedFriendRequest(Uid arg0, NetworkServiceAccountId arg1);
        Result GetFacedFriendRequestProfileImage(out int arg0, Uid arg1, NetworkServiceAccountId arg2, Span<byte> arg3);
        Result GetFacedFriendRequestProfileImageFromPath(out int arg0, ReadOnlySpan<sbyte> arg1, Span<byte> arg2);
        Result SendFriendRequestWithExternalApplicationCatalogId(Uid arg0, NetworkServiceAccountId arg1, int arg2, ExternalApplicationCatalogId arg3, in InAppScreenName arg4, in InAppScreenName arg5);
        Result ResendFacedFriendRequest(Uid arg0, NetworkServiceAccountId arg1);
        Result SendFriendRequestWithNintendoNetworkIdInfo(Uid arg0, NetworkServiceAccountId arg1, int arg2, MiiName arg3, MiiImageUrlParam arg4, MiiName arg5, MiiImageUrlParam arg6);
        Result GetSnsAccountLinkPageUrl(out WebPageUrl arg0, Uid arg1, int arg2);
        Result UnlinkSnsAccount(Uid arg0, int arg1);
        Result BlockUser(Uid arg0, NetworkServiceAccountId arg1, int arg2);
        Result BlockUserWithApplicationInfo(Uid arg0, NetworkServiceAccountId arg1, int arg2, ApplicationInfo arg3, in InAppScreenName arg4);
        Result UnblockUser(Uid arg0, NetworkServiceAccountId arg1);
        Result GetProfileExtraFromFriendCode(out ProfileExtraImpl arg0, Uid arg1, FriendCode arg2);
        Result DeletePlayHistory(Uid arg0);
        Result ChangePresencePermission(Uid arg0, int arg1);
        Result ChangeFriendRequestReception(Uid arg0, bool arg1);
        Result ChangePlayLogPermission(Uid arg0, int arg1);
        Result IssueFriendCode(Uid arg0);
        Result ClearPlayLog(Uid arg0);
        Result SendFriendInvitation(Uid arg0, ReadOnlySpan<NetworkServiceAccountId> arg1, in FriendInvitationGameModeDescription arg2, ApplicationInfo arg3, ReadOnlySpan<byte> arg4, bool arg5);
        Result ReadFriendInvitation(Uid arg0, ReadOnlySpan<FriendInvitationId> arg1);
        Result ReadAllFriendInvitations(Uid arg0);
        Result DeleteFriendListCache(Uid arg0);
        Result DeleteBlockedUserListCache(Uid arg0);
        Result DeleteNetworkServiceAccountCache(Uid arg0);
    }
}
